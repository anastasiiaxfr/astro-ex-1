---
const { page } = Astro.props;

// Create an array of page numbers to display (max 5)
function getPageNumbers(currentPage, lastPage, maxPages = 5) {
    // Calculate the start and end of the page number window
    const halfMaxPages = Math.floor(maxPages / 2);
    let startPage = Math.max(currentPage - halfMaxPages, 1);
    let endPage = Math.min(startPage + maxPages - 1, lastPage);

    // Adjust the start if we're near the end
    if (endPage === lastPage) {
        startPage = Math.max(endPage - maxPages + 1, 1);
    }

    // Generate the array of page numbers
    return Array.from(
        { length: endPage - startPage + 1 },
        (_, i) => startPage + i
    );
}

const pageNumbers = getPageNumbers(page.currentPage, page.lastPage, 5);
---

{
    page.lastPage >= 2 && (
        <div
            class="pagination animate__animated animate__fadeIn"
            style={`animation-delay: ${1}s`}
        >
            {page.url.first ? (
                <a href={page.url.first}>First</a>
            ) : (
                <span class="disabled">First</span>
            )}
            {page.url.prev ? (
                <a href={page.url.prev}>Previous</a>
            ) : (
                <span class="disabled">Previous</span>
            )}

            {/* Numeric page links */}
            {pageNumbers.map((num) =>
                num === page.currentPage ? (
                    <span class="active">{num}</span>
                ) : (
                    <a
                        href={`${page.url.current.split('/').slice(0, -1).join('/')}/${num}`}
                    >
                        {num}
                    </a>
                )
            )}

            {page.url.next ? (
                <a href={page.url.next}>Next</a>
            ) : (
                <span class="disabled">Next</span>
            )}
            {page.url.last ? (
                <a href={page.url.last}>Last</a>
            ) : (
                <span class="disabled">Last</span>
            )}
        </div>
    )
}
